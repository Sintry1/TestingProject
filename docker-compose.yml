version: '3'
# # INFO
# All $VARIABLES are currently stored in a .env file on the same level as this
# document, please remember to populate it.
#
# You can test to see if the variables are loading correctly with the command:
# * `docker compose config`
# If the variables still have a $ on them then the .env is not being loaded.

# # USAGE
# The reccomended commands when working with docker compose is to use:
# * `docker compose up --build -d`
# This will force any container with changes to rebuild
#
# The reccomended way to take down the containers is with:
# * `docker compose down -v`
# This will ensure that the volume is deleted too.

# # Deployment
# The images are stored on docker hub. The deployment flow is as follows:
# 1. Login into Docker with `docker login -u omnihost` and the access token
# 2. Build the images with `docker compose build`
# 3. Push the images with `docker compose push`
# 4. On the deployment machine, Login into Docker with `docker login -u omnihost` and the access token
# 5. On the deployment machine, pull the images with `docker compose pull`
# 6. On the deployment machine, run the images with `docker compose up -d`
# 6.B On the deployment machine, run the Caddy reverse proxy if it isn't already running with `docker compose -f docker-compose.caddy.yml up --build -d`

services:
  api:
    container_name: omnihost-api
    image: omnihost/dangleterre:api-${DEPLOYMENT_ENV:-local}
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./.deploy/api/Dockerfile
    environment:
      LINODE_PERSONAL_TOKEN: ${LINODE_PERSONAL_TOKEN}
      LINODE_STORAGE_CLUSTER_ID: ${LINODE_STORAGE_CLUSTER_ID}
      LINODE_STORAGE_BUCKET_ID: ${LINODE_STORAGE_BUCKET_ID}
      LINODE_STORAGE_ACCESS_KEY: ${LINODE_STORAGE_ACCESS_KEY}
      LINODE_STORAGE_SECRET_KEY: ${LINODE_STORAGE_SECRET_KEY}
      POSTGRES_HOST: ${POSTGRES_HOST:-omnihost-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-root}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE:-omnihost}
      GLOBAL_CORS_ALLOWED_ORIGIN: ${GLOBAL_CORS_ALLOWED_ORIGIN}
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - omnihost-net
    ports:
      - 3333:3333

  frontend:
    container_name: omnihost-frontend
    image: omnihost/dangleterre:frontend-${DEPLOYMENT_ENV:-local}
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./.deploy/frontend/Dockerfile
    environment:
      FRONTEND_API_URL: ${FRONTEND_API_URL:-http://localhost:3333}
    networks:
      - omnihost-net
    ports:
      - 8080:80

  postgres:
    container_name: omnihost-postgres
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-root}
      POSTGRES_DB: ${POSTGRES_DATABASE:-omnihost}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - '5432:5432'
    networks:
      - omnihost-net
    restart: unless-stopped

# ---------------------------------
# ------------ NETWORK ------------
networks:
  omnihost-net:
    name: omnihost-net

volumes:
  postgres:
